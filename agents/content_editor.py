"""
Defines the ContentEditorAgent which refines the blog content generated by the writer
based on the planner’s goals. Improves grammar, tone, and coherence.
Also provides constructive feedback for improvement.

🔁 Example Usage:

Input:
    draft = "AI is being used in education today."
    goals = "Blog Title: AI in Education\nYouTube Idea: ...\nTweet Hooks: ..."

Output (dict):
    {
        "revised_post": "... polished blog content ...",
        "feedback": "... what was improved and what could be better ..."
    }
"""

import google.generativeai as genai

class ContentEditorAgent:
    """
    The ContentEditorAgent reviews and refines the blog post generated by ContentWriterAgent.
    It ensures alignment with PlannerAgent's goals and enhances clarity, tone, and structure.
    Also provides feedback to help regenerate a better version.
    """

    def __init__(self, api_key: str, model_name="gemini-1.5-flash"):  # Added model_name parameter with default
        """
        Initializes the Gemini model using the provided API key.

        Args:
            api_key (str): Your Google Generative AI API key.
            model_name (str, optional): The Gemini model to use. Defaults to "gemini-1.5-flash" for hackathon quota compatibility.
        """
        genai.configure(api_key=api_key)
        self.model = genai.GenerativeModel(model_name)  # Updated to use model_name

    def revise_content(self, draft: str, goals: str, structural_feedback: bool = False) -> dict:
        """
        Edits and improves the blog post to match the planner's goals,
        while improving readability, tone, grammar, and structure.
        Also provides critique for use in feedback loop.
        If structural_feedback is True, focuses on structural improvements.

        Args:
            draft (str): The raw content generated by ContentWriterAgent.
            goals (str): The original content goals provided by PlannerAgent.
            structural_feedback (bool): If True, prioritize structural changes.

        Returns:
            dict: {
                "revised_post": (str) Polished version of the blog,
                "feedback": (str) Editor feedback and improvement suggestions
            }
        """

        prompt = f"""
You are a professional blog editor. Below is a draft blog post and its original planning goals.

Your task is:
1. Revise the blog to improve {'structure and organization' if structural_feedback else 'grammar, tone, clarity, coherence'}.
2. Ensure alignment with the planner’s goals.
3. Write a short critique explaining:
   - What you improved
   - What is still weak or could be improved further

--- GOALS ---
{goals}

--- DRAFT BLOG POST ---
{draft}

Return your response in the following format:

### Revised Blog Post:
<your revised blog post here>

### Editor Feedback:
<constructive feedback here>
"""
        response = self.model.generate_content(prompt)
        output = response.text.strip()

        # Split the output into revised content and feedback
        if "### Editor Feedback:" in output:
            revised_part, feedback_part = output.split("### Editor Feedback:", 1)
            revised_post = revised_part.replace("### Revised Blog Post:", "").strip()
            feedback = feedback_part.strip()
        else:
            revised_post = output.strip()
            feedback = "No feedback provided."

        return {
            "revised_post": revised_post,
            "feedback": feedback
        }